@use "./variables" as v;
@use "sass:color";
@use "sass:map";


// Convert pixels to rem
@function rem($pixels, $context: 16) {
  @return ($pixels / $context) * 1rem;
}

// Convert pixels to em
@function em($pixels, $context: 16) {
  @return ($pixels / $context) * 1em;
}

// Get color from chart colors map
@function chart-color($name) {
  @return map.get(v.$chart-colors, $name);
}

// Get a color with opacity
@function color-with-opacity($color, $opacity) {
  @return rgba($color, $opacity);
}

// Lighten a color by a percentage
@function lighten-color($color, $percentage) {
  @return color.mix(white, $color, $percentage);
}

// Darken a color by a percentage
@function darken-color($color, $percentage) {
  @return color.mix(black, $color, $percentage);
}

// Get a contrasting text color (black or white) based on background color
@function contrast-color($color) {
  $luminance: (
      0.299 * red($color) + 0.587 * green($color) + 0.114 * blue($color)
    ) /
    255;
  @return if($luminance > 0.5, v.$color-gray-900, white);
}

// Z-index function to maintain consistent layers
@function z-index($layer) {
  $z-layers: (
    dropdown: v.$z-index-dropdown,
    sticky: v.$z-index-sticky,
    fixed: v.$z-index-fixed,
    modal-backdrop: v.$z-index-modal-backdrop,
    modal: v.$z-index-modal,
    popover: v.$z-index-popover,
    tooltip: v.$z-index-tooltip,
  );

  @return map.get($z-layers, $layer);
}

// Get a spacing value
@function spacing($key) {
  $spacings: (
    0: v.$spacing-0,
    1: v.$spacing-1,
    2: v.$spacing-2,
    3: v.$spacing-3,
    4: v.$spacing-4,
    5: v.$spacing-5,
    6: v.$spacing-6,
    8: v.$spacing-8,
    10: v.$spacing-10,
    12: v.$spacing-12,
    16: v.$spacing-16,
    20: v.$spacing-20,
    24: v.$spacing-24,
  );

  @return map-get($spacings, $key);
}
